import java.nio.file.Paths

plugins {
    id "com.android.library" //
}


// Path to local QAIRT SDK.
// Download QAIRT SDK from https://qpm.qualcomm.com/#/main/tools/details/Qualcomm_AI_Runtime_SDK
// e.g. "/opt/qcom/aistack/qairt/2.33.0.250327"
//      "C:\\Qualcomm\\AIStack\\QAIRT\\2.33.0.250327"
def qnnSDKLocalPath= "C:\\Qualcomm\\AIStack\\QAIRT\\2.31.0.250130"   // <-- Please add QNN SDK root path

// List of model assets
def models = ["llama3_2_3b"]
// Relative asset path for model configuration and binaries
def relAssetsPath = "src/main/assets/models"
def buildDir = project(":ChatApp").getLayout().getBuildDirectory()
def libsDir = buildDir.dir("libs")

android {
    compileSdk 33

    defaultConfig {
        // TODO: use androidMinSDK value from gradle.properties once it updates to 31
        minSdk 31
        targetSdk 33
        versionCode 1
        versionName "1.0"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++17"
                abiFilters "arm64-v8a"
                arguments "-DQNN_SDK_ROOT_PATH=" + qnnSDKLocalPath
            }
        }
        /*sourceSets {
            main {
                jniLibs.srcDir libsDir
            }
        }*/
        signingConfig signingConfigs.debug
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    namespace "com.quicinc.chatapp"
    externalNativeBuild {
        cmake {
            path file("src/main/cpp/CMakeLists.txt")
            version "3.22.1"
        }
    }
    packagingOptions {
        // Extract native libraries so they"re accessible via the file system directly.
        jniLibs.useLegacyPackaging = true
    }
    aaptOptions {
        noCompress "bin", "json"
    }

    preBuild.doFirst {
        if (!qnnSDKLocalPath) {
            throw new RuntimeException("Please download QAIRT SDK and set `qnnSDKLocalPath` in build.gradle.");
        }

        // Check if QNN SDK is set correctly
        def qnnSDKFile = file(qnnSDKLocalPath)
        if (!qnnSDKFile.exists()) {
            throw new RuntimeException("QAIRT SDK does not exist at $qnnSDKFile.absolutePath.");
        }

        // Copy required QNN libs
        def genieLibFile = file(Paths.get(qnnSDKLocalPath, "lib", "aarch64-android", "libGenie.so"))
        if (!genieLibFile.exists()) {
            throw new RuntimeException("libGenie.so does not exist. Expected at $genieLibFile.absolutePath");
        }

        // Ensure genie config and tokenizer are present
        models.each { model ->
            def configFile = file(Paths.get(relAssetsPath, model, "genie_config.json"))
            if (!configFile.exists()) {
                throw new RuntimeException("Missing genie_config.json for $model. Expected at $configFile.absolutePath")
            }
            def tokenizerFile = file(Paths.get(relAssetsPath, model, "tokenizer.json"))
            if (!tokenizerFile.exists()) {
                throw new RuntimeException("Missing tokenizer.json for $model. Expected at $tokenizerFile.absolutePath")
            }
        }

        def libsABIDir = buildDir.dir("libs/arm64-v8a")
        copy {
            from qnnSDKLocalPath

            include "**/lib/aarch64-android/libQnnHtp.so"
            include "**/lib/aarch64-android/libQnnHtpPrepare.so"
            include "**/lib/aarch64-android/libQnnSystem.so"
            include "**/lib/aarch64-android/libQnnSaver.so"
            include "**/lib/hexagon-v**/unsigned/libQnnHtpV**Skel.so"
            include "**/lib/aarch64-android/libQnnHtpV**Stub.so"

            into libsABIDir
            // Copy libraries without directory structure
            eachFile {
                path = name
            }
            includeEmptyDirs = false
        }
    }
}

dependencies {
    implementation fileTree(include: ["*.jar"], dir: "libs")
    implementation "androidx.appcompat:appcompat:1.7.0"
    implementation "com.google.android.material:material:1.12.0"
    implementation "androidx.constraintlayout:constraintlayout:2.2.0"
}

if (System.getProperty("user.dir") != project.rootDir.path) {
    throw new RuntimeException("This project should be opened from the `android` directory (parent of ChatApp directory), NOT the ChatApp directory.")
}
